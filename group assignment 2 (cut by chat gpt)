lapply(c("readr", "reshape2", "ggplot2", "dplyr", "factoextra", "ggbiplot", "boot"), library, character.only = TRUE)

setwd("C:/Users/jtgb0/OneDrive/Ambiente de Trabalho/Int to DS/Assignment/Assignment 2")
gei <- read.csv2("Team_2_gei_data.csv")
db <- read.csv2("Team_2_db_data.csv")

###Cleaning the Data

gei <- gei[,-1]
db <- db[,-1]

variables <- c("DATE", "COUNTRY_NAME", "INDICATOR_NAME",
               "VALUE")

gei_subset <- gei[, variables]

#Build a df for each year 
gei_2017 <- data.frame(dcast(gei_subset[which(gei_subset$DATE ==
                                                "2017"), ], COUNTRY_NAME ~ INDICATOR_NAME), YEAR = "2017")
gei_2018 <- data.frame(dcast(gei_subset[which(gei_subset$DATE ==
                                                "2018"), ], COUNTRY_NAME ~ INDICATOR_NAME), YEAR = "2018")
gei_2019 <- data.frame(dcast(gei_subset[which(gei_subset$DATE ==
                                                "2019"), ], COUNTRY_NAME ~ INDICATOR_NAME), YEAR = "2019")
#Merge them
gei_cleaned <- rbind(gei_2017, gei_2018, gei_2019)

colnames(gei_cleaned)[1] <- "COUNTRY"
colnames(gei_cleaned)[4] <- "GEI_score"

#Change the variables to numeric
gei_cleaned[, 2:16] <- lapply(gei_cleaned[, 2:16], function(x) as.numeric(as.character(x)))

#Remove columns for DB score for 2015, 2010-2014
db_cleaned <- subset(db, select = -c(7, 8))

# Rename country, year and DB score columns
names(db_cleaned)[2] <- "COUNTRY"
names(db_cleaned)[5] <- "YEAR"
names(db_cleaned)[6] <- "DB_score"
##################################################################################

#1.1

db_gei_data <- merge(db_cleaned, gei_cleaned, by = c('COUNTRY', 'YEAR'))

#2.1

plot(db_gei_data$DB_score, db_gei_data$GEI_score,
     main = "Scatter Plot of DB Scores vs GEI Scores",
     xlab = "DB Scores",
     ylab = "GEI Scores",
     col = "blue", 
     pch = 19)
abline(lm(GEI_score ~ DB_score, data = db_gei_data), col = "red")


correlation <- cor(db_gei_data$DB_score, db_gei_data$GEI_score) 
print(correlation)

#2.2

plot(db_gei_data$DB_score, db_gei_data$Oppurtunity.startup,
     main = "Scatter Plot of DB Scores vs Oppurtunity Startup",
     xlab = "DB Scores",
     ylab = "GEI Scores",
     col = "blue", 
     pch = 19)
abline(lm(Oppurtunity.startup ~ DB_score, data = db_gei_data), col = "red")
correlation_Oppurtunity.startup <- cor(db_gei_data$DB_score, db_gei_data$Oppurtunity.startup) 
print(correlation_Oppurtunity.startup)


plot(db_gei_data$DB_score, db_gei_data$Competition,
     main = "Scatter Plot of DB Scores vs Competition",
     xlab = "DB Scores",
     ylab = "GEI Scores",
     col = "blue", 
     pch = 19)
abline(lm(Competition ~ DB_score, data = db_gei_data), col = "red")
correlation_competition <- cor(db_gei_data$DB_score, db_gei_data$Competition) 
print(correlation_competition)


plot(db_gei_data$DB_score, db_gei_data$Process.Innovation,
     main = "Scatter Plot of DB Scores vs Process Innovation",
     xlab = "DB Scores",
     ylab = "GEI Scores",
     col = "blue", 
     pch = 19)
abline(lm(Process.Innovation ~ DB_score, data = db_gei_data), col = "red")
correlation_Process.Innovation <- cor(db_gei_data$DB_score, db_gei_data$Process.Innovation) 
print(correlation_Process.Innovation)

#3.1

gei_indicators <- db_gei_data[, c(7,8,10:21)]

set.seed(123)

pca_results <- prcomp(gei_indicators, center = TRUE, scale = TRUE) 
summary(pca_results)


#3.2

source("permtestPCA.R")
permtestPCA(gei_indicators, nTests = 1000) 
summary(pca_results)

#3.3

#Kaiser rule
observed_eigenvalues <- pca_results$sdev^2 
print(observed_eigenvalues)

#Scree plot & VAF
fviz_eig(gei_pca, addlabels = TRUE, ylim = c(0, 70))

#3.4

# Biplot for GEI Indicators
fviz_pca_biplot(gei_pca, label = "var", col.var = "black") + ggtitle("PCA Biplot for GEI Indicators")
# View the loadings for each variable on the principal components
print(gei_pca$rotation)

# 3.5

var_pc1 <- function(data, indices) {
  resampled_data <- data[indices, ]
  pca_resampled <- prcomp(resampled_data, scale. = TRUE)
  var_explained <- (pca_resampled$sdev^2) / sum(pca_resampled$sdev^2)
  return(var_explained[1])  
}

set.seed(123)
results_pc1 <- boot(gei_indicators, statistic = var_pc1, R = 1000)

boot.ci(results_pc1, type = "perc")

pc1_loadings <- abs(pca_results$rotation[, 1])

top_contributors <- sort(pc1_loadings, decreasing = TRUE)[1:14]  
top_contributors
