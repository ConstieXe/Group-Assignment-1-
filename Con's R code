lapply(c("reshape2", "ggplot2", "dplyr", "factoextra", "ggbiplot", "boot"), library, character.only = TRUE)

###Cleaning the Data

gei <- gei[,-1]
db <- db[,-1]

variables <- c("DATE", "COUNTRY_NAME", "INDICATOR_NAME",
               "VALUE")

gei_subset <- gei[, variables]

#Build a df for each year 
gei_2017 <- data.frame(dcast(gei_subset[which(gei_subset$DATE ==
                                                "2017"), ], COUNTRY_NAME ~ INDICATOR_NAME), YEAR = "2017")
gei_2018 <- data.frame(dcast(gei_subset[which(gei_subset$DATE ==
                                                "2018"), ], COUNTRY_NAME ~ INDICATOR_NAME), YEAR = "2018")
gei_2019 <- data.frame(dcast(gei_subset[which(gei_subset$DATE ==
                                                "2019"), ], COUNTRY_NAME ~ INDICATOR_NAME), YEAR = "2019")
#Merge them
gei_cleaned <- rbind(gei_2017, gei_2018, gei_2019)

colnames(gei_cleaned)[1] <- "COUNTRY"
colnames(gei_cleaned)[4] <- "GEI_score"

#Change the variables to numeric
gei_cleaned[, 2:16] <- lapply(gei_cleaned[, 2:16], function(x) as.numeric(as.character(x)))

#Remove columns for DB score for 2015, 2010-2014
db_cleaned <- subset(db, select = -c(7, 8))

# Rename country, year and DB score columns
names(db_cleaned)[2] <- "COUNTRY"
names(db_cleaned)[5] <- "YEAR"
names(db_cleaned)[6] <- "DB_score"

##################################################################################
#1.1
db_gei_data <- merge(db_cleaned, gei_cleaned, by = c('COUNTRY', 'YEAR'))
#2.1
plot(db_gei_data$DB_score, db_gei_data$GEI_score,
     main = "Scatter Plot of DB Scores vs GEI Scores",
     xlab = "DB Scores",
     ylab = "GEI Scores",
     col = "blue", 
     pch = 19)
abline(lm(GEI_score ~ DB_score, data = db_gei_data), col = "red")
correlation <- cor(db_gei_data$DB_score, db_gei_data$GEI_score) 
print(correlation)
#2.2
plot(db_gei_data$DB_score, db_gei_data$Oppurtunity.startup,
     main = "Scatter Plot of DB Scores vs Oppurtunity Startup",
     xlab = "DB Scores",
     ylab = "GEI Scores",
     col = "blue", 
     pch = 19)
abline(lm(Oppurtunity.startup ~ DB_score, data = db_gei_data), col = "red")
correlation_Oppurtunity.startup <- cor(db_gei_data$DB_score, db_gei_data$Oppurtunity.startup) 
print(correlation_Oppurtunity.startup)
plot(db_gei_data$DB_score, db_gei_data$Competition,
     main = "Scatter Plot of DB Scores vs Competition",
     xlab = "DB Scores",
     ylab = "GEI Scores",
     col = "blue", 
     pch = 19)
abline(lm(Competition ~ DB_score, data = db_gei_data), col = "red")
correlation_competition <- cor(db_gei_data$DB_score, db_gei_data$Competition) 
print(correlation_competition)
plot(db_gei_data$DB_score, db_gei_data$Process.Innovation,
     main = "Scatter Plot of DB Scores vs Process Innovation",
     xlab = "DB Scores",
     ylab = "GEI Scores",
     col = "blue", 
     pch = 19)
abline(lm(Process.Innovation ~ DB_score, data = db_gei_data), col = "red")
correlation_Process.Innovation <- cor(db_gei_data$DB_score, db_gei_data$Process.Innovation) 
print(correlation_Process.Innovation)
#3.1
gei_indicators <- db_gei_data[, c(7,8,10:21)]
set.seed(123)
pca_results <- prcomp(gei_indicators, center = TRUE, scale = TRUE) 
summary(pca_results)
#3.2
source("/Users/constantinexe/Downloads/permtestPCA.R")
permtestPCA(gei_indicators, nTests = 1000) 
summary(pca_results)
#3.3
observed_eigenvalues <- pca_results$sdev^2 
print(observed_eigenvalues)
fviz_eig(pca_results, addlabels = TRUE, ylim = c(0, 70))
#3.4
fviz_pca_biplot(pca_results, label = "var", col.var = "black") + ggtitle("PCA Biplot for GEI Indicators")
print(pca_results$rotation)
# 4.1
set.seed(123)
train_index <- sample(1:nrow(db_gei_data), 0.7 * nrow(db_gei_data))
train_set <- db_gei_data[train_index, ]
test_set <- db_gei_data[-train_index, ]
# 4.2 
benchmark_model <- lm(DB_score ~ as.matrix(train_set[, c(7,8,10:21)]), data = train_set)  
summary(benchmark_model)
#4.3
library(pls)
pcr_model <- pcr(DB_score ~ ., data = train_set[, c(6,7,8,10:21)], 
                 scale = TRUE, validation = "CV")
validationplot(pcr_model, val.type = "MSEP") 
summary(pcr_model)
#4.4
lm_predictions <- predict(benchmark_model, newdata = test_set[, c(6,7,8,10:21)])
pcr_predictions_1comp <- predict(pcr_model, newdata = test_set[, c(6,7,8,10:21)], ncomp = 1)
mse_lm <- mean((test_set$DB_score - lm_predictions)^2)
mse_pcr_1comp <- mean((test_set$DB_score - pcr_predictions_1comp)^2)
print(paste("MSE of Linear Regression:", mse_lm))
print(paste("MSE of PCR (with 1 component):", mse_pcr_1comp))
r_squared_lm <- 1 - (sum((test_set$DB_score - lm_predictions)^2)) / (sum((test_set$DB_score - mean(test_set$DB_score))^2))
r_squared_pcr_1comp <- 1 - (sum((test_set$DB_score - pcr_predictions_1comp)^2)) / (sum((test_set$DB_score - mean(test_set$DB_score))^2))
print(paste("R-squared of Linear Regression:", r_squared_lm))
print(paste("R-squared of PCR (with 1 component):", r_squared_pcr_1comp))
# 4.5
predictions <- read.csv("/Users/constantinexe/Library/Mobile Documents/com~apple~CloudDocs/Erasmus University Rotterdam/Introduction to Data Science/predictions.csv")
str(predictions)
pcr_model_pred <- predict(pcr_model, newdata = predictions, ncomp = 1)
print(pcr_model_pred)
